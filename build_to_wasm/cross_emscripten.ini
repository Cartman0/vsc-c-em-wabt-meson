## cross template
### - build machine: the computer that is doing the actual compiling.
### - host machine: the machine on which the compiled binary will run.
### - target machine: the machine on which the compiled binary's output will run, only meaningful if the program produces machine-specific output.
### ðŸ”— https://mesonbuild.com/Cross-compilation.html#cross-compilation

## ref: https://github.com/mesonbuild/meson/blob/master/cross/wasm.txt

## Binaries
### ðŸ”— https://mesonbuild.com/Cross-compilation.html#binaries
[binaries]
c = 'emcc'
c_ld='ld.wasm'
cpp = 'em++'
cpp_ld='ld.wasm'
ar = 'emar'
# exe_wrapper = 'wine' # A command used to run generated executables.


## Built-in option
### `<lang>_args`: arguments of compiler in the language
### `<lang>_link_args`: arguments of linker in the language
### ðŸ”— https://mesonbuild.com/Builtin-options
[built-in options]
c_args = [] # C compile arguments to use
# emcc options: https://github.com/emscripten-core/emscripten/blob/main/src/settings.js
c_link_args = ['-s','EXPORT_ALL=1',
                '-s', 'WASM=1'] # C link arguments to use
# c_std='none' # 'none'/'c89'/'c99'/'c11'/'c17'/'c18'/'c2x'/'gnu89'/'gnu99'/'gnu11'/'gnu17'/'gnu18'/'gnu2x' # C language standard to use
# c_winlibs=[] # see below	free-form comma-separated list # Standard Windows libs to link against
# c_thread_count=4 #integer value â‰¥ 0 # Number of threads to use with emcc when using threads
cpp_args=[] # free-form comma-separated list # C++ compile arguments to use
cpp_link_args = ['-s','EXPORT_ALL=1',
                '-s', 'WASM=1'] # free-form comma-separated list # C++ link arguments to use
# cpp_std='none' # none/c++98/c++03/c++11/c++14/c++17/c++20/c++2a/c++1z/gnu++03/gnu++11/gnu++14/gnu++17/gnu++1z/gnu++2a, gnu++20, vc++14, vc++17, vc++latest	C++ language standard to use
# cpp_debugstl=false # true/false # C++ STL debug mode
# cpp_eh='default' # none/default/a/s/sc # C++ exception handling type
# cpp_rtti=true # true/false # Whether to enable RTTI (runtime type identification)
# cpp_thread_count=4 # integer value â‰¥ 0 # Number of threads to use with emcc when using threads
# cpp_winlibs=[] # see below free-form comma-separated list	# Standard Windows libs to link against
# fortran_std='none' # [none, legacy, f95, f2003, f2008, f2018] # Fortran language standard to use
# cuda_ccbindir='' # filesystem path # CUDA non-default toolchain directory to use (-ccbin) (Added in 0.57.1)


## Properties
### ðŸ”— https://mesonbuild.com/Cross-compilation.html#binaries
[properties]
### properties for cross build
# sizeof_int = 4
# sizeof_wchar_t = 4
# sizeof_void* = 4

# alignment_char = 1 # 1 byte
# alignment_void* = 4
# alignment_double = 4

# has_function_printf = true

# sys_root = '/some/path' # may point to the root of the host system path (the system that will run the compiled binaries). This is used internally by Meson to set the PKG_CONFIG_SYSROOT_DIR environment variable for pkg-config. If this is unset the host system is assumed to share a root with the build system.
# pkg_config_libdir = '/some/path/lib/pkgconfig' # may point to a list of path used internally by Meson to set the PKG_CONFIG_LIBDIR environment variable for pkg-config. This prevents pkg-config from searching cross dependencies in system directories.

# needs_exe_wrapper = true # One important thing to note, if you did not define an exe_wrapper in the previous section, is that Meson will make a best-effort guess at whether it can run the generated binaries on the build machine. It determines whether this is possible by looking at the system and cpu_family of build vs host. There will however be cases where they do match up, but the build machine is actually not compatible with the host machine. Typically this will happen if the libc used by the build and host machines are incompatible, or the code relies on kernel features not available on the build machine. One concrete example is a macOS build machine producing binaries for an iOS Simulator x86-64 host. They're both darwin and the same architecture, but their binaries are not actually compatible. In such cases you may use the needs_exe_wrapper property to override the auto-detection:

### native/cross common
# cmake_toolchain_file='' # specifies an absolute path to an already existing CMake toolchain file that will be loaded with include() as the last instruction of the automatically generated CMake toolchain file from Meson. (new in 0.56.0)
# cmake_defaults=false # is a boolean that specifies whether Meson should automatically generate default toolchain variables from other sections (binaries, host_machine, etc.) in the machine file. Defaults are always overwritten by variables set in the [cmake] section. The default is true. (new in 0.56.0)
# cmake_skip_compiler_test={} # is an enum that specifies when Meson should automatically generate toolchain variables to skip the CMake compiler sanity checks. This only has an effect if cmake_defaults is true. Supported values are always, never, dep_only. The default is dep_only. (new in 0.56.0)
# cmake_use_exe_wrapper=false # is a boolean that controls whether to use the exe_wrapper specified in [binaries] to run generated executables in CMake subprojects. This setting has no effect if the exe_wrapper was not specified. The default value is true. (new in 0.56.0)
# java_home='' # is an absolute path pointing to the root of a Java installation. 


## Machine Entries
### ðŸ”— https://mesonbuild.com/Cross-compilation.html#machine-entries
[host_machine]
system = 'emscripten'
cpu_family = 'wasm32' # CPU Family table:  https://mesonbuild.com/Reference-tables.html#cpu-families
cpu = 'wasm32' 
endian = 'little' # endianess: byte order type: it can check union's type-punning in C. # e.g. {intel x86, DEC VAX: little}, {MC68000, SPARC, Java VM: big} 









